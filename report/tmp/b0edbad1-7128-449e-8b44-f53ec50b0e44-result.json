{"name": "列出食品接口用例", "status": "broken", "statusDetails": {"message": "KeyError: 'code'", "trace": "self = <testCase.test_food_manage.TestFoodManage object at 0x00000241C60F13C8>\ntitle = '页数为空', req_body = {'limit': 1, 'page': ''}\nexp_resp = {'error': 'Internal Server Error'}\nfood_init = <libs.foodManage.FoodManage object at 0x00000241C60F1D30>\n\n    @allure.story(\"列出食品\")  # 接口的名称\n    @allure.title(\"列出食品接口用例\")  # 用例的标题\n    @pytest.mark.food_list  # 列出食品标签\n    @pytest.mark.parametrize('title,req_body,exp_resp', get_excel_data(\"食品管理\", 'listfood'))\n    @allure.title(\"{title}\")\n    def test_list_food(self, title, req_body, exp_resp, food_init):  # 食物的初始化条件\n        res = food_init.query(req_body)\n        if res.get(\"code\"):\n>           self.api_assert(res, '=', exp_resp, assert_info='code')\n\ntest_food_manage.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\common\\apiAssert.py:40: in api_assert\n    raise error\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'testCase.test_food_manage.TestFoodManage'>\nresult = {'code': 20000, 'data': {'current': 1, 'pages': 0, 'records': [], 'size': 1, ...}, 'flag': '松勤教育', 'msg': '成功', ...}\ncondition = '=', exp_result = {'error': 'Internal Server Error'}\nassert_info = 'code', msg = '断言操作'\n\n    @classmethod  # 类方法\n    def api_assert(cls, result, condition, exp_result, assert_info, msg='断言操作'):\n        assert_detail= '实际结果:{0},预期结果:{1}'\n        \"\"\"\n        :param result:  实际返回数据\n        :param condition: 判断条件\n        :param exp_result: 预期的返回数据\n        :param assert_info: 断言的关键信息  code   msg\n        :param msg: 操作描述\n        :return: 断言结果\n        \"\"\"\n        try:\n            assert_type = {\n>               \"==\": result[assert_info] == exp_result[assert_info],\n                \"!=\": result[assert_info] != exp_result[assert_info],\n                \"in\": result[assert_info] in exp_result[assert_info] if  isinstance(exp_result[assert_info],list) else  False ,\n            }\nE           KeyError: 'code'\n\n..\\common\\apiAssert.py:27: KeyError"}, "attachments": [{"name": "log", "source": "82d65a81-080d-4ff1-9dad-80a89db3a798-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "title", "value": "'页数为空'"}, {"name": "req_body", "value": "{'page': '', 'limit': 1}"}, {"name": "exp_resp", "value": "{'error': 'Internal Server Error'}"}], "start": 1705759781149, "stop": 1705759781316, "uuid": "77100555-2c33-4809-9a20-7912764e095b", "historyId": "821076cf80ea400a6df694b1582a0c5f", "testCaseId": "0b810305a36706cfc03bd9c4595e2e21", "fullName": "testCase.test_food_manage.TestFoodManage#test_list_food", "labels": [{"name": "story", "value": "列出食品"}, {"name": "feature", "value": "食品模块"}, {"name": "epic", "value": "订餐系统"}, {"name": "tag", "value": "food_list"}, {"name": "tag", "value": "food"}, {"name": "parentSuite", "value": "testCase"}, {"name": "suite", "value": "test_food_manage"}, {"name": "subSuite", "value": "TestFoodManage"}, {"name": "host", "value": "DESKTOP-1LCDIJF"}, {"name": "thread", "value": "12248-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCase.test_food_manage"}]}